*************************************************************************************************************************
Scenario #1: Join two Hive tables
I've created 2 hive tables, dim_product and dim_customer. order_details is already there and could be treated as a fact table. Let's create a quick join query - find list of products and their total sales.

hive>select p.product_name, sum(f.price)as total_sales
	from order_details as f inner join dim_product as p on f.product_key = p.product_key
	group by p.product_name;

HiveQL syntax is almost same as T-SQL.
*************************************************************************************************************************
Scenario #2: Run a Hive query using Tez
Hive execution engine could be either MR or Tez (may be spark too). Let's check what that is set.
hive>set hive.execution.engine;

It was already tez.Let's set to mr and run query of scenario #1.

hive>set hive.execution.engine=mr;

The query ran in MR mode in 43+ seconds. Let's change the mode to tez.

hive>set hive.execution.engine=tez;

The query in tez was super fast, it completed in 9+ seconds.
*************************************************************************************************************************
Scenario #3: Run a Hive query using vectorization

Vectorized query execution is a Hive feature that greatly reduces the CPU usage for typical query operations like scans, filters, aggregates, and joins. A standard query execution system processes one row at a time. This involves long code paths and significant metadata interpretation in the inner loop of execution. Vectorized query execution streamlines operations by processing a block of 1024 rows at a time.

To use vectorized query execution, you must store your data in ORC format, and set the following variable as shown in Hive SQL (see Configuring Hive):

set hive.vectorized.execution.enabled = true;

Let's create an orc hive table.
hive> create table t_orc (x int) stored as orc;

Let's insert some data:
hive> insert into t_orc (1);
hive> insert into t_orc (2);
hive> insert into t_orc (3);

Set the property as explained earlier:
hive> set hive.vectorized.execution.enabled = true;

Now, run the plan:
hive> explain select count(*) from t_orc;

You will see Execution mode: vectorized.
Note: In my case I was getting message as - "Plan not optimized by CBO.", will do research on this later.
*************************************************************************************************************************
Scenario #4: Output the execution plan for a Hive query

hive> explain <any query>

*************************************************************************************************************************
Scenario #5: Use a subquery within a Hive query
hive> select count(*) as orphanage_customer_id from order_details f where f.customer_key 
	not in (select customer_key from dim_customer);
*************************************************************************************************************************
Scenario #6: Output data from a Hive query that is totally ordered across multiple reducers

Run below command in hive:
	hive> set mapreduce.job.reduces;
	mapreduce.job.reduces=-1

Let's set it to 4 reducers:
	mapreduce.job.reduces=4
	hive> set mapreduce.job.reduces=4;

Case 1: Order By:
hive> create table t_order as select * from order_details order by product_key;

Case 2: Sort By:
hive> create table t_sort as select * from order_details sort by product_key;

In first case only one reducer is used but in the second case you can use
multiple reducers and hence it could be more effecient.

Note:
Hive supports SORT BY which sorts the data per reducer. The difference between "order by" and "sort by" is that the former guarantees total order in the output while the latter only guarantees ordering of the rows within a reducer. If there are more than one reducer, "sort by" may give partially ordered final results.
*************************************************************************************************************************